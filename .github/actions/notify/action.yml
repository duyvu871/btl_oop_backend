name: "Send Webhook Notification"
description: "Post CI/CD result and jobs to a webhook"

inputs:
  build_result:
    description: "Final result from a job in the caller workflow (e.g. needs.build.result)"
    required: false
  webhook_url:
    description: "Webhook endpoint URL"
    required: false
  webhook_secret:
    description: "Webhook secret header value"
    required: false
  ci_webhook_url:
    description: "Fallback webhook URL if webhook_url is empty"
    required: false

runs:
  using: "composite"
  steps:
    - name: Send CI notification
      shell: bash
      env:
        # Context t·ª´ workflow caller ‚Äì OK d√πng trong composite
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_API_URL: ${{ github.api_url }}
        REPO: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
        WORKFLOW: ${{ github.workflow }}
        BRANCH: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        ACTOR: ${{ github.actor }}

        # C√°c gi√° tr·ªã ph·∫£i ƒëi qua inputs (KH√îNG d√πng needs/secrets tr·ª±c ti·∫øp ·ªü ƒë√¢y)
        BUILD_RESULT: ${{ inputs.build_result }}
        WEBHOOK_URL_IN: ${{ inputs.webhook_url }}
        CI_WEBHOOK_URL_IN: ${{ inputs.ci_webhook_url }}
        WEBHOOK_SECRET: ${{ inputs.webhook_secret }}
      run: |
        set -euo pipefail

        # X√°c ƒë·ªãnh overall status
        STATUS="${BUILD_RESULT:-${{ job.status }}}"
        case "$STATUS" in
          success|failure|cancelled) : ;;
          *) STATUS="${{ job.status }}";;
        esac

        RUN_URL="https://github.com/$REPO/actions/runs/$RUN_ID"

        # ƒê·∫£m b·∫£o jq s·∫µn s√†ng
        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true
        fi

        # L·∫•y commit message/title an to√†n
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          COMMIT_MESSAGE=$(jq -r '.pull_request.title // ""' "$GITHUB_EVENT_PATH")
        else
          COMMIT_MESSAGE=$(jq -r '.head_commit.message // ""' "$GITHUB_EVENT_PATH")
        fi

        # Ch·ªçn webhook URL: ∆∞u ti√™n webhook_url, fallback ci_webhook_url
        WEBHOOK_URL="${WEBHOOK_URL_IN:-}"
        if [ -z "$WEBHOOK_URL" ] && [ -n "${CI_WEBHOOK_URL_IN:-}" ]; then
          WEBHOOK_URL="$CI_WEBHOOK_URL_IN"
        fi

        if [ -z "${WEBHOOK_URL:-}" ] || [ -z "${WEBHOOK_SECRET:-}" ]; then
          echo "‚ö†Ô∏è  Webhook not configured (webhook_url/ci_webhook_url & webhook_secret). Skipping."
          exit 0
        fi

        sleep 2

        # L·∫•y danh s√°ch jobs
        JOBS_API_JSON=$(curl -s \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "$GITHUB_API_URL/repos/$REPO/actions/runs/$RUN_ID/jobs?per_page=100")

        JOBS_JSON=$(echo "$JOBS_API_JSON" | jq '[.jobs[]
          | { id: .id,
              name: .name,
              result: (.conclusion // .status),
              url: .html_url,
              started_at: .started_at,
              completed_at: .completed_at,
              duration_ms: (if (.started_at and .completed_at)
                            then ((.completed_at | fromdateiso8601) - (.started_at | fromdateiso8601)) * 1000
                            else null end)
            } ]')

        WORKFLOW_DURATION_MS=$(echo "$JOBS_JSON" | jq '([.[] | select(.duration_ms != null) | .duration_ms] | add) // 0')

        PAYLOAD=$(jq -n \
          --arg workflow "$WORKFLOW" \
          --arg repo "$REPO" \
          --arg run_id "$RUN_ID" \
          --arg run_url "$RUN_URL" \
          --arg status "$STATUS" \
          --arg branch "$BRANCH" \
          --arg commit_sha "$COMMIT_SHA" \
          --arg commit_message "$COMMIT_MESSAGE" \
          --arg actor "$ACTOR" \
          --arg workflow_duration_ms "$WORKFLOW_DURATION_MS" \
          --argjson jobs "$JOBS_JSON" \
          --argjson jobs_full "$JOBS_API_JSON" \
          '{
            workflow_name:$workflow,
            repository:$repo,
            run_id:$run_id,
            run_url:$run_url,
            status:$status,
            jobs:$jobs,
            jobs_full:$jobs_full,
            workflow_duration_ms: ($workflow_duration_ms|tonumber),
            branch:$branch,
            commit_sha:$commit_sha,
            commit_message:$commit_message,
            actor:$actor
          }')

        echo "üì° POST $WEBHOOK_URL"
        RESP=$(curl -s -w "\n%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -H "X-Webhook-Secret: $WEBHOOK_SECRET" \
          -d "$PAYLOAD" "$WEBHOOK_URL")

        CODE=$(echo "$RESP" | tail -n1)
        BODY=$(echo "$RESP" | sed '$d')

        if [ "$CODE" = "200" ]; then
          echo "‚úÖ Notified OK"
          echo "$BODY"
        else
          echo "‚ùå Notify failed ($CODE)"
          echo "$BODY"
          # kh√¥ng fail pipeline v√¨ notify
          exit 0
        fi
