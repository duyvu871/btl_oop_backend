services:
  fastapi:
    image: ${IMAGE_SHA:-adc300/btl_oop:latest}
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DEBUG=False
      - FRONTEND_URL=${FRONTEND_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - QDRANT_URL=http://qdrant:6333
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME}
      - SENTRY_DSN=${SENTRY_DSN}
      - ARQ_QUEUE_NAME=${ARQ_QUEUE_NAME:-arq:queue}
      - ARQ_MAX_JOBS=${ARQ_MAX_JOBS:-10}
      - ARQ_JOB_TIMEOUT=${ARQ_JOB_TIMEOUT:-300}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  worker_send_mail:
    image: ${IMAGE_SHA:-adc300/btl_oop:latest}
    restart: always
    env_file:
      - .env
    environment:
      - DEBUG=False
      - FRONTEND_URL=${FRONTEND_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - QDRANT_URL=http://qdrant:6333
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - SMTP_TLS=${SMTP_TLS}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - EMAILS_FROM_NAME=${EMAILS_FROM_NAME}
      - SENTRY_DSN=${SENTRY_DSN}
      - ARQ_QUEUE_NAME=${ARQ_QUEUE_NAME:-arq:queue}
      - ARQ_MAX_JOBS=${ARQ_MAX_JOBS:-10}
      - ARQ_JOB_TIMEOUT=${ARQ_JOB_TIMEOUT:-300}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    command: uv run arq src.workers.send_mail.WorkerSettings
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    expose:
      - "127.0.0.1:6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "127.0.0.1:5442:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "127.0.0.1:6479:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  qdrant_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  backend:
    driver: bridge

